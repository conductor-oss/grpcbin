plugins {
	id 'java'
	id 'com.google.protobuf' version '0.9.4'
}

group = 'org.conductoross'
version = '1.0.0'

def grpcVersion = '1.68.1'
def protobufVersion = '4.28.2'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(21)
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'javax.annotation:javax.annotation-api:1.3.2'

	implementation "io.grpc:grpc-netty-shaded:${grpcVersion}"
	implementation "io.grpc:grpc-protobuf:${grpcVersion}"
	implementation "io.grpc:grpc-stub:${grpcVersion}"
	implementation "io.grpc:grpc-services:${grpcVersion}"
	implementation "com.google.protobuf:protobuf-java:${protobufVersion}"

	testImplementation 'org.junit.jupiter:junit-jupiter-api:5.9.2'
	testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.9.2'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

protobuf {
	protoc {
		artifact = "com.google.protobuf:protoc:${protobufVersion}"
	}
	plugins {
		grpc {
			artifact = "io.grpc:protoc-gen-grpc-java:${grpcVersion}"
		}
	}
	generateProtoTasks {
		all()*.plugins {
			grpc {}
		}
	}
}

// Configure JAR tasks
jar {
	manifest {
		attributes(
				'Main-Class': 'org.conductoross.grpcbin.GRPCServer'
		)
	}
}

// Create tasks for fat JARs for both server and client
tasks.register('serverJar', Jar) {
	archiveClassifier = 'server'
	duplicatesStrategy = DuplicatesStrategy.EXCLUDE
	manifest {
		attributes 'Main-Class': 'org.conductoross.grpcbin.GRPCServer'
	}
	from {
		configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
	}
	with jar
}

artifacts {
	archives serverJar
}

tasks.named('test') {
	useJUnitPlatform()
}
